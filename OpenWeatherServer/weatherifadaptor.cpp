/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c WeatherIfAdaptor -a weatherifadaptor.h:weatherifadaptor.cpp foo.bar.weather.xml
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "weatherifadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <iostream>

using namespace std;
/*
 * Implementation of adaptor class WeatherIfAdaptor
 */

WeatherIfAdaptor::WeatherIfAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

WeatherIfAdaptor::~WeatherIfAdaptor()
{
    // destructor
}

QList<QString> WeatherIfAdaptor::searchCity(QString name)
{
    // handle method call foo.bar.weather.currentPressure
    QList<QString> result;
    result.append("one");
    result.append("two");
    result.append("three");

    QMetaObject::invokeMethod(parent(), "searchCity", Q_RETURN_ARG(QList<QString>, result), Q_ARG(QString, name));

    return result;
}

QList<QString> WeatherIfAdaptor::searchCity(double lon, double lat)
{
    // handle method call foo.bar.weather.currentPressure
    QList<QString> result;
    result.append("one");
    result.append("two");
    result.append("three");

    QMetaObject::invokeMethod(parent(), "searchCity", Q_RETURN_ARG(QList<QString>, result), Q_ARG(double, lon), Q_ARG(double, lat));

    return result;
}

double WeatherIfAdaptor::currentTemp(int cityId)
{
    // handle method call foo.bar.weather.currentTemp
    double result = 666;
    QMetaObject::invokeMethod(parent(), "currentTemp", Q_RETURN_ARG(double, result), Q_ARG(int, cityId));

    return result;
}

double WeatherIfAdaptor::currentPressure(int cityId)
{
    // handle method call foo.bar.weather.currentPressure
    double result = 666;
    QMetaObject::invokeMethod(parent(), "currentPressure", Q_RETURN_ARG(double, result), Q_ARG(int, cityId));

    return result;
}

QString WeatherIfAdaptor::currentCondition(int cityId)
{
    // handle method call foo.bar.weather.currentPressure
    QString result = "test";
    QMetaObject::invokeMethod(parent(), "currentCondition", Q_RETURN_ARG(QString, result), Q_ARG(int, cityId));

    return result;
}

QList<double> WeatherIfAdaptor::forecastTemp(int cityId)
{
    // handle method call foo.bar.weather.currentPressure
    QList<double> result;
    result.append(1);
    result.append(2);
    result.append(3);

    QMetaObject::invokeMethod(parent(), "forecastTemp", Q_RETURN_ARG(QList<double>, result), Q_ARG(int, cityId));

    return result;
}

QList<double> WeatherIfAdaptor::forecastPressure(int cityId)
{
    // handle method call foo.bar.weather.currentPressure
    QList<double> result;
    result.append(1);
    result.append(2);
    result.append(3);

    QMetaObject::invokeMethod(parent(), "forecastPressure", Q_RETURN_ARG(QList<double>, result), Q_ARG(int, cityId));

    return result;
}

QList<QString> WeatherIfAdaptor::forecastCondition(int cityId)
{
    // handle method call foo.bar.weather.currentPressure
    QList<QString> result;
    result.append("first");
    result.append("second");
    result.append("third");

    QMetaObject::invokeMethod(parent(), "forecastCondition", Q_RETURN_ARG(QList<QString>, result), Q_ARG(int, cityId));

    return result;
}
